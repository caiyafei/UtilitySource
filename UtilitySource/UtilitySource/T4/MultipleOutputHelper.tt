<#@ assembly name="System.Core"#>
<#@ assembly name="System.Data.Linq"#>
<#@ assembly name="EnvDTE"#>
<#@ assembly name="System.Xml"#>
<#@ assembly name="System.Xml.Linq"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="System.IO"#>
<#@ import namespace="System.Text"#>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<#+
    // https://raw.github.com/damieng/DamienGKit
    // http://damieng.com/blog/2009/11/06/multiple-outputs-from-t4-made-easy-revisited

    /// <summary>
    /// 多文件输出管理类
    /// </summary>
    class MutiOutputManager
    {
        private MutiOutputManager(ITextTemplatingEngineHost host, StringBuilder template)
        {
            this.host = host;
            this.template = template;
        }

        private class Block
        {
            public string Name;
            public int Start, Length;
            public bool IncludeInDefault;
        }

        private Block currentBlock;
        private Block CurrentBlock
        {
            get { return currentBlock; }
            set
            {
                if (CurrentBlock != null)
                    EndBlock();
                if (value != null)
                    value.Start = template.Length;
                currentBlock = value;
            }
        }
        private static string FilesPath = "";
        private static string DbName = "";
        private readonly List<Block> files = new List<Block>();
        private readonly Block footer = new Block();
        private readonly Block header = new Block();
        private readonly ITextTemplatingEngineHost host;
        private readonly StringBuilder template;
        protected readonly List<string> generatedFileNames = new List<string>();

        //2020-01-19 
        //是否允许覆盖生成实体
        public static bool AllowOverwrite = false;

        public static MutiOutputManager Create(ITextTemplatingEngineHost host, StringBuilder template, string filespath, string dbname, bool allowOberwrite)
        {
            FilesPath = filespath;
            DbName = dbname;
            AllowOverwrite = allowOberwrite;
            return (host is IServiceProvider) ? new VSManager(host, template) : new MutiOutputManager(host, template);
        }

        public void StartNewFile(string name)
        {
            if (name == null)
                throw new ArgumentNullException("name");
            CurrentBlock = new Block { Name = name };
        }

        public void StartFooter(bool includeInDefault = true)
        {
            CurrentBlock = footer;
            footer.IncludeInDefault = includeInDefault;
        }

        public void StartHeader(bool includeInDefault = true)
        {
            CurrentBlock = header;
            header.IncludeInDefault = includeInDefault;
        }

        public void EndBlock()
        {
            if (CurrentBlock == null)
                return;
            CurrentBlock.Length = template.Length - CurrentBlock.Start;
            if (CurrentBlock != header && CurrentBlock != footer)
                files.Add(CurrentBlock);
            currentBlock = null;
        }

        public virtual void Process(bool split, bool sync = true)
        {
            if (split)
            {
                EndBlock();
                string headerText = template.ToString(header.Start, header.Length);
                string footerText = template.ToString(footer.Start, footer.Length);
                string outputPath = Path.GetDirectoryName(host.TemplateFile);
                //路径上移修改
                //string ectypalOutputPathe = Path.GetDirectoryName(Path.GetDirectoryName(outputPath));
                string ectypalOutputPathe = Path.GetDirectoryName(outputPath);

                //文件夹处理   2019-3-20 14:46:36
                if (!string.IsNullOrEmpty(FilesPath))
                {
                    FilesPath = ectypalOutputPathe + "\\" + FilesPath.TrimStart('\\').TrimEnd('\\') + "\\" + DbName;
                    if (!Directory.Exists(FilesPath))
                    {
                        Directory.CreateDirectory(FilesPath);
                    }
                }



                files.Reverse();
                if (!footer.IncludeInDefault)
                    template.Remove(footer.Start, footer.Length);
                foreach (Block block in files)
                {
                    String fileName = FilesPath == "" ? Path.Combine(outputPath, block.Name) : Path.Combine(FilesPath, block.Name);
                    String content = headerText + template.ToString(block.Start, block.Length) + footerText;
                    generatedFileNames.Add(fileName);
                    CreateFile(fileName, content);
                    template.Remove(block.Start, block.Length);
                }
                if (!header.IncludeInDefault)
                    template.Remove(header.Start, header.Length);
            }
        }

        protected virtual void CreateFile(String fileName, String content)
        {
            if (IsFileContentDifferent(fileName, content))
                File.WriteAllText(fileName, content);
        }

        public virtual String GetCustomToolNamespace(String fileName)
        {
            return null;
        }

        public virtual String DefaultProjectNamespace
        {
            get { return null; }
        }

        protected bool IsFileContentDifferent(String fileName, String newContent)
        {

            //return !(File.Exists(fileName) && File.ReadAllText(fileName) == newContent);

            //2020-01-19
            //return !File.Exists(fileName);

            //2020-01-19
            //是否允许覆盖生成实体
            return (AllowOverwrite || !File.Exists(fileName));

        }



        private class VSManager : MutiOutputManager
        {
            private readonly EnvDTE.ProjectItem templateProjectItem;
            private readonly EnvDTE.DTE dte;
            private readonly Action<string> checkOutAction;
            private readonly Action<List<string>> projectSyncAction;

            public override string DefaultProjectNamespace
            {
                get
                {
                    return templateProjectItem.ContainingProject.Properties.Item("DefaultNamespace").Value.ToString();
                }
            }

            public override string GetCustomToolNamespace(string fileName)
            {
                return dte.Solution.FindProjectItem(fileName).Properties.Item("CustomToolNamespace").Value.ToString();
            }

            public override void Process(bool split, bool sync)
            {
                if (templateProjectItem.ProjectItems == null)
                    return;
                base.Process(split, sync);
                if (sync)
                    projectSyncAction(generatedFileNames);
            }

            protected override void CreateFile(string fileName, string content)
            {
                if (IsFileContentDifferent(fileName, content))
                {
                    CheckoutFileIfRequired(fileName);
                    File.WriteAllText(fileName, content);
                }
            }

            internal VSManager(ITextTemplatingEngineHost host, StringBuilder template)
                : base(host, template)
            {
                var hostServiceProvider = (IServiceProvider)host;
                if (hostServiceProvider == null)
                    throw new ArgumentNullException("Could not obtain IServiceProvider");
                dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
                if (dte == null)
                    throw new ArgumentNullException("Could not obtain DTE from host");
                templateProjectItem = dte.Solution.FindProjectItem(host.TemplateFile);
                checkOutAction = fileName => dte.SourceControl.CheckOutItem(fileName);
                projectSyncAction = keepFileNames => ProjectSync(templateProjectItem, keepFileNames);
            }

            private static void ProjectSync(EnvDTE.ProjectItem templateProjectItem, List<string> keepFileNames)
            {
                var keepFileNameSet = new HashSet<string>(keepFileNames);
                var projectFiles = new Dictionary<string, EnvDTE.ProjectItem>();
                var originalFilePrefix = Path.GetFileNameWithoutExtension(templateProjectItem.FileNames[0]) + ".";
                foreach (EnvDTE.ProjectItem projectItem in templateProjectItem.ProjectItems)
                    projectFiles.Add(projectItem.FileNames[0], projectItem);

                /*  将生成模板文件添加引用到项目中    2019-3-21 14:28:35

                // Remove unused items from the project
                foreach (var pair in projectFiles)
                    if (!keepFileNames.Contains(pair.Key) && !(Path.GetFileNameWithoutExtension(pair.Key) + ".").StartsWith(originalFilePrefix))
                        pair.Value.Delete();

                // Add missing files to the project
                foreach(String fileName in keepFileNameSet)
                    if (!projectFiles.ContainsKey(fileName))
                        templateProjectItem.ProjectItems.AddFromFile(fileName);
                */
            }

            private void CheckoutFileIfRequired(String fileName)
            {
                var sc = dte.SourceControl;
                if (sc != null && sc.IsItemUnderSCC(fileName) && !sc.IsItemCheckedOut(fileName))
                    checkOutAction.EndInvoke(checkOutAction.BeginInvoke(fileName, null, null));
            }
        }
    } 
#>